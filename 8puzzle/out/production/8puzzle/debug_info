See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (3 warnings)
PMD:          FAILED (10 warnings)
Checkstyle:   FAILED (0 errors, 25 warnings)

Correctness:  24/47 tests passed
Memory:       10/13 tests passed
Timing:       0/125 tests passed

Aggregate score: 48.33%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
7.0K Aug 23 20:36 Board.java
4.3K Aug 23 20:36 Solver.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M C FCBL_FIELD_COULD_BE_LOCAL FCBL: Class Solver$SearchNode defines fields that are used only as locals  At Solver.java:[line 137]
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'tiles', exposing the internal representation of the class 'Board'. Instead, create a defensive copy of the object referenced by the parameter variable 'blocks' and store that copy in the instance variable 'tiles'.   At Board.java:[line 20]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'prev' is never read. Consider removing it from the class.  At Solver.java:[line 137]
Warnings generated: 3


================================================================


% pmd *.java
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:72:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:138:34: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:144:13: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:145:26: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:145:39: '==' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:145:41: '==' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:145:46: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:145:47: '==' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:145:49: '==' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:145:52: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:147:13: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:151:34: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:152:19: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:157:49: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:168:34: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:169:19: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:182:41: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:221:22: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:221:29: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:221:44: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:222:30: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:224:25: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Solver.java:1: Do not use .* in import statements. [AvoidStarImport]
[WARN] Solver.java:44:44: Boolean expression can be simplified, e.g., use 'if (!isEmpty)' instead of 'if (isEmpty == false)'. [SimplifyBooleanExpression]
Checkstyle ends with 0 errors and 25 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() on file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check whether two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * corresponding array elements are equal
  * argument is object of type String
  * argument is object of type Object
  * argument is null
  * argument is Board of different dimension
==> passed

Test 10b: check equals() on m-by-m vs. n-by-n goal boards
  * m = 2, n = 2
  * m = 3, n = 3
  * m = 4, n = 4
  * m = 2, n = 5
  * m = 5, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 22/22 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           144                  128
=> passed     3           208                  192
=> passed     4           256                  240
=> passed     8           576                  560
=> passed    12          1024                 1008
=> passed    16          1600                 1584
=> passed    20          2304                 2288
=> passed    37          6872                 6856
=> passed    72         23104                23088
=> passed   120         61504                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 64.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: call moves() with file inputs
  * puzzle00.txt
    - moves() returns wrong value
    - student   moves() = 1
    - reference moves() = 0
    - board =
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99  0
  * puzzle01.txt
    - moves() returns wrong value
    - student   moves() = 2
    - reference moves() = 1
    - board =
        2
         1  0
         3  2
  * puzzle02.txt
    - moves() returns wrong value
    - student   moves() = 3
    - reference moves() = 2
    - board =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64 65 66 67 68 69 70  0 71
        73 74 75 76 77 78 79 80 72
  * puzzle03.txt
    - moves() returns wrong value
    - student   moves() = 4
    - reference moves() = 3
    - board =
        2
         2  0
         1  3
  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = 5
    - reference moves() = 4
    - board =
        3
         0  1  3
         4  2  5
         7  8  6
  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = 6
    - reference moves() = 5
    - board =
        3
         4  1  3
         0  2  6
         7  5  8
  * puzzle06.txt
    - moves() returns wrong value
    - student   moves() = 7
    - reference moves() = 6
    - board =
        4
         0  1  2  3
         5  6  7  4
         9 10 11  8
        13 14 15 12
  * puzzle07.txt
    - moves() returns wrong value
    - student   moves() = 9
    - reference moves() = 7
    - board =
        3
         1  2  3
         0  7  6
         5  4  8
  * puzzle08.txt
    - moves() returns wrong value
    - student   moves() = 10
    - reference moves() = 8
    - board =
        3
         2  3  5
         1  0  4
         7  8  6
  * puzzle09.txt
    - moves() returns wrong value
    - student   moves() = 10
    - reference moves() = 9
    - board =
        4
         2  0  3  4
         1 10  6  8
         5  9  7 12
        13 14 11 15
  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = 11
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80
  * puzzle11.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 1b: call solution() with file inputs
  * puzzle00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 1
    - moves()              = 1
  * puzzle01.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 2
  * puzzle02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 3
  * puzzle03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 4
  * puzzle04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 5
    - moves()              = 5
  * puzzle05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 6
    - moves()              = 6
  * puzzle06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 7
    - moves()              = 7
  * puzzle07.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 9
    - moves()              = 9
  * puzzle08.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 10
    - moves()              = 10
  * puzzle09.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 10
    - moves()              = 10
  * puzzle10.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 11
    - moves()              = 11
  * puzzle11.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 2a: call moves() with more file inputs
  * puzzle14.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 2b: call solution() with more file inputs
  * puzzle14.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 3a: call moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
    - moves() returns wrong value
    - student   moves() = 2
    - reference moves() = 1
    - board =
        3
         1  2  3
         4  5  6
         7  0  8
    - failed on trial 1 of 1000

==> FAILED

Test 3b: call solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 2
    - failed on trial 1 of 1000

==> FAILED

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = 5
    - reference moves() for puzzle04.txt = 4
  * puzzle00.txt and puzzle04.txt
    - wrong number of moves()
    - student   moves() for puzzle00.txt = 1
    - reference moves() for puzzle00.txt = 0
  * puzzle04.txt and puzzle00.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = 5
    - reference moves() for puzzle04.txt = 4
==> FAILED

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: call moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 7: call solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
==> FAILED

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
==> FAILED

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
    - moves() returns wrong value
    - student   moves() = 1
    - reference moves() = 0
    - board =
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99  0
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 1
    - moves()              = 1
    - did not call the equals() method in Board
    - likely a bug in the critical optimization
  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = 5
    - reference moves() = 4
    - board =
        3
         0  1  3
         4  2  5
         7  8  6
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 5
    - moves()              = 5
  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = 6
    - reference moves() = 5
    - board =
        3
         4  1  3
         0  2  6
         7  5  8
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 6
    - moves()              = 6
  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = 11
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 11
    - moves()              = 11
==> FAILED

Test 9b: check whether equals() method in Board is called
         with an argument of the wrong type
  * puzzle00.txt
    - moves() returns wrong value
    - student   moves() = 1
    - reference moves() = 0
    - board =
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99  0
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 1
    - moves()              = 1
  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = 5
    - reference moves() = 4
    - board =
        3
         0  1  3
         4  2  5
         7  8  6
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 5
    - moves()              = 5
  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = 6
    - reference moves() = 5
    - board =
        3
         4  1  3
         0  2  6
         7  5  8
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 6
    - moves()              = 6
  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = 11
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 11
    - moves()              = 11
==> passed

Test 9c: Check whether equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         0  1  3
         4  2  5
         7  8  6

    - board 2:
        3
         4  1  3
         0  2  5
         7  8  6

  * puzzle05.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         4  1  3
         0  2  6
         7  5  8

    - board 2:
        3
         4  1  3
         7  2  6
         0  5  8

  * puzzle10.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

    - board 2:
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64 74 65 67 68 78 69 70 72
        73  0 66 75 76 77 79 71 80

==> FAILED

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: call moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
    - moves() returns wrong value
    - student   moves() = 1
    - reference moves() = 0
    - board =
        2
         1  2
         3  0
  * puzzle2x2-01.txt
    - moves() returns wrong value
    - student   moves() = 2
    - reference moves() = 1
    - board =
        2
         1  2
         0  3
  * puzzle2x2-02.txt
    - moves() returns wrong value
    - student   moves() = 3
    - reference moves() = 2
    - board =
        2
         0  1
         3  2
  * puzzle2x2-03.txt
    - moves() returns wrong value
    - student   moves() = 4
    - reference moves() = 3
    - board =
        2
         3  1
         0  2
  * puzzle2x2-04.txt
    - moves() returns wrong value
    - student   moves() = 5
    - reference moves() = 4
    - board =
        2
         2  3
         1  0
  * puzzle2x2-05.txt
    - moves() returns wrong value
    - student   moves() = 6
    - reference moves() = 5
    - board =
        2
         2  3
         0  1
  * puzzle2x2-06.txt
    - moves() returns wrong value
    - student   moves() = 7
    - reference moves() = 6
    - board =
        2
         0  3
         2  1
==> FAILED

Test 11b: call solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 1
    - moves()              = 1
  * puzzle2x2-01.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 2
  * puzzle2x2-02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 3
  * puzzle2x2-03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 4
  * puzzle2x2-04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 5
    - moves()              = 5
  * puzzle2x2-05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 6
    - moves()              = 6
  * puzzle2x2-06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 7
    - moves()              = 7
==> FAILED

Test 12a: call moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
    - moves() returns wrong value
    - student   moves() = 1
    - reference moves() = 0
    - board =
        3
         1  2  3
         4  5  6
         7  8  0
  * puzzle3x3-01.txt
    - moves() returns wrong value
    - student   moves() = 2
    - reference moves() = 1
    - board =
        3
         1  2  3
         4  5  0
         7  8  6
  * puzzle3x3-02.txt
    - moves() returns wrong value
    - student   moves() = 3
    - reference moves() = 2
    - board =
        3
         1  2  3
         4  0  5
         7  8  6
  * puzzle3x3-03.txt
    - moves() returns wrong value
    - student   moves() = 4
    - reference moves() = 3
    - board =
        3
         1  2  3
         0  4  5
         7  8  6
  * puzzle3x3-04.txt
    - moves() returns wrong value
    - student   moves() = 5
    - reference moves() = 4
    - board =
        3
         0  1  2
         4  5  3
         7  8  6
  * puzzle3x3-05.txt
    - moves() returns wrong value
    - student   moves() = 6
    - reference moves() = 5
    - board =
        3
         1  0  2
         4  6  3
         7  5  8
  * puzzle3x3-06.txt
    - moves() returns wrong value
    - student   moves() = 7
    - reference moves() = 6
    - board =
        3
         1  2  0
         4  8  3
         7  6  5
  * puzzle3x3-07.txt
    - moves() returns wrong value
    - student   moves() = 8
    - reference moves() = 7
    - board =
        3
         1  2  3
         0  4  8
         7  6  5
  * puzzle3x3-08.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 12b: call solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 1
    - moves()              = 1
  * puzzle3x3-01.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 2
  * puzzle3x3-02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 3
  * puzzle3x3-03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 4
  * puzzle3x3-04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 5
    - moves()              = 5
  * puzzle3x3-05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 6
    - moves()              = 6
  * puzzle3x3-06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 7
    - moves()              = 7
  * puzzle3x3-07.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 8
    - moves()              = 8
  * puzzle3x3-08.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 13a: call moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
    - moves() returns wrong value
    - student   moves() = 1
    - reference moves() = 0
    - board =
        4
         1  2  3  4
         5  6  7  8
         9 10 11 12
        13 14 15  0
  * puzzle4x4-01.txt
    - moves() returns wrong value
    - student   moves() = 2
    - reference moves() = 1
    - board =
        4
         1  2  3  4
         5  6  7  8
         9 10 11  0
        13 14 15 12
  * puzzle4x4-02.txt
    - moves() returns wrong value
    - student   moves() = 3
    - reference moves() = 2
    - board =
        4
         1  2  3  4
         5  6  7  0
         9 10 11  8
        13 14 15 12
  * puzzle4x4-03.txt
    - moves() returns wrong value
    - student   moves() = 4
    - reference moves() = 3
    - board =
        4
         1  2  3  4
         5  6  0  8
         9 10  7 12
        13 14 11 15
  * puzzle4x4-04.txt
    - moves() returns wrong value
    - student   moves() = 5
    - reference moves() = 4
    - board =
        4
         1  2  3  4
         5  0  7  8
         9  6 11 12
        13 10 14 15
  * puzzle4x4-05.txt
    - moves() returns wrong value
    - student   moves() = 6
    - reference moves() = 5
    - board =
        4
         1  2  3  4
         5  6  7  8
        10  0 11 12
         9 13 14 15
  * puzzle4x4-06.txt
    - moves() returns wrong value
    - student   moves() = 7
    - reference moves() = 6
    - board =
        4
         1  6  2  4
         5  0  3  8
         9 10  7 11
        13 14 15 12
  * puzzle4x4-07.txt
    - moves() returns wrong value
    - student   moves() = 8
    - reference moves() = 7
    - board =
        4
         1  2  3  4
         6 10  7  8
         5  0 11 12
         9 13 14 15
  * puzzle4x4-08.txt
    - moves() returns wrong value
    - student   moves() = 9
    - reference moves() = 8
    - board =
        4
         1  2  3  4
         5 10  6  8
        13  9  7 12
        14  0 11 15
  * puzzle4x4-09.txt
    - moves() returns wrong value
    - student   moves() = 10
    - reference moves() = 9
    - board =
        4
         2  3  4  0
         1  6  7  8
         5 10 11 12
         9 13 14 15
  * puzzle4x4-10.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 13b: call solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 1
    - moves()              = 1
  * puzzle4x4-01.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 2
    - moves()              = 2
  * puzzle4x4-02.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 3
    - moves()              = 3
  * puzzle4x4-03.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 4
    - moves()              = 4
  * puzzle4x4-04.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 5
    - moves()              = 5
  * puzzle4x4-05.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 6
    - moves()              = 6
  * puzzle4x4-06.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 7
    - moves()              = 7
  * puzzle4x4-07.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 8
    - moves()              = 8
  * puzzle4x4-08.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 9
    - moves()              = 9
  * puzzle4x4-09.txt
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 10
    - moves()              = 10
  * puzzle4x4-10.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 14a: call moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
    - moves() returns wrong value
    - student   moves() = 6
    - reference moves() = 5
    - board =
        2
         3  0
         2  1
    - failed on trial 1 of 100

  * 200 random 3-by-3 boards that are <= 20 moves from goal

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 200

==> FAILED

Test 14b: call solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
    - number of boards in solution() does not equal to 1 + moves()
      (it should be 1 greater because solution() starts with the inital board)
    - length of solution() = 7
    - moves()              = 7
    - failed on trial 1 of 100

  * 200 random 3-by-3 boards that are <= 20 moves from goal

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 200

==> FAILED


Total: 2/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in MinPQ exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED


Total: 0/3 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

failed when solving puzzle20.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 500000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Test 1: measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
==> 0/25 tests passed



Test 2: count MinPQ operations

               filename   insert()         delMin()      max PQ size
--------------------------------------------------------------------
==> 0/25 tests passed



Test 3: count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
==> 0/25 tests passed



Test 4a: count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
==> 0/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
==> 0/25 tests passed


Total: 0/125 tests passed!


================================================================
