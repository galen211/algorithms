See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 6 warnings)

Correctness:  46/47 tests passed
Memory:       10/13 tests passed
Timing:       69/125 tests passed

Aggregate score: 87.46%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
7.0K Aug 30 22:30 Board.java
4.4K Aug 30 22:30 Solver.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'tiles', exposing the internal representation of the class 'Board'. Instead, create a defensive copy of the object referenced by the parameter variable 'blocks' and store that copy in the instance variable 'tiles'.   At Board.java:[line 18]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'simultaneousSolution_2()' is never called.  At Solver.java:[lines 72-79]
Warnings generated: 2


================================================================


% pmd *.java
*-----------------------------------------------------------
Solver.java:12: Can you replace the instance (or static) variable 'comparator' with a local variable? [SingularField]
Solver.java:71: Avoid unused private methods, such as 'simultaneousSolution_2()'. [UnusedPrivateMethod]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:181:41: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Solver.java:55:57: The local (or parameter) variable 'pq' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Solver.java:71:24: The method 'simultaneousSolution_2' must start with a lowercase letter and use camelCase. [MethodName]
Checkstyle ends with 0 errors and 3 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:13:19: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [MyIllegalType]
[WARN] Solver.java:14:19: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [MyIllegalType]
[WARN] Solver.java:16:19: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [MyIllegalType]
Checkstyle ends with 0 errors and 3 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() on file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * corresponding array elements are equal
  * argument is object of type String
  * argument is object of type Object
  * argument is null
  * argument is Board of different dimension
==> passed

Test 10b: check equals() on m-by-m vs. n-by-n goal boards
  * m = 2, n = 2
  * m = 3, n = 3
  * m = 4, n = 4
  * m = 2, n = 5
  * m = 5, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 22/22 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           144                  128
=> passed     3           208                  192
=> passed     4           256                  240
=> passed     8           576                  560
=> passed    12          1024                 1008
=> passed    16          1600                 1584
=> passed    20          2304                 2288
=> passed    37          6872                 6856
=> passed    72         23104                23088
=> passed   120         61504                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 64.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: check solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 24/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 212392 bytes
  - memory of reference Solver = 4896 bytes
  - student / reference        = 43.38
==> FAILED

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 1240088 bytes
  - memory of reference Solver = 6056 bytes
  - student / reference        = 204.77
==> FAILED

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 5050456 bytes
  - memory of reference Solver = 7216 bytes
  - student / reference        = 699.90
==> FAILED


Total: 0/3 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.02
=> passed  puzzle22.txt      22    3     0.01
=> passed  puzzle21.txt      21    3     0.01
=> passed  puzzle23.txt      23    3     0.03
=> passed  puzzle24.txt      24    3     0.01
=> passed  puzzle25.txt      25    3     0.03
=> passed  puzzle27.txt      27    3     0.02
=> passed  puzzle29.txt      29    3     0.07
=> passed  puzzle26.txt      26    3     0.02
=> passed  puzzle28.txt      28    3     0.06
=> passed  puzzle30.txt      30    3     0.15
=> passed  puzzle31.txt      31    3     0.21
=> passed  puzzle39.txt      39    4     0.13
=> passed  puzzle41.txt      41    5     0.10
=> passed  puzzle34.txt      34    4     1.07
=> passed  puzzle37.txt      37    4     0.22
=> passed  puzzle44.txt      44    5     0.69
=> passed  puzzle32.txt      32    4     1.46
=> passed  puzzle35.txt      35    4     0.81
=> passed  puzzle33.txt      33    4     3.28
=> passed  puzzle43.txt      43    4     2.41
=> passed  puzzle46.txt      46    4     2.57
=> passed  puzzle40.txt      40    4     1.29
=> FAILED  puzzle36.txt      36    4     8.64 (>= 5.0 seconds)

Exceeded CPU limit of 5.0 seconds per puzzle. Aborting tests.

==> 23/25 tests passed



Test 2: count MinPQ operations

               filename   insert()         delMin()      max PQ size
--------------------------------------------------------------------
=> passed  puzzle20.txt       1411              840              571
=> passed  puzzle22.txt       4039             2398             1641
=> passed  puzzle21.txt       1989             1176              813
=> passed  puzzle23.txt       5359             3174             2185
=> passed  puzzle24.txt       2296             1396              900
=> passed  puzzle25.txt       8376             4974             3402
=> passed  puzzle27.txt       5983             3652             2331
=> passed  puzzle29.txt      17575            10726             6849
=> passed  puzzle26.txt       5519             3342             2177
=> passed  puzzle28.txt      15698             9560             6138
=> passed  puzzle30.txt      34154            20814            13340
=> passed  puzzle31.txt      61153            37204            23949
=> passed  puzzle39.txt      41441            20382            21059
=> passed  puzzle41.txt      28353            12154            16199
=> FAILED  puzzle34.txt     259462   (1.1x)  124038   (1.1x)  135424   (1.1x)
=> passed  puzzle37.txt      66636            31854            34782
=> passed  puzzle44.txt     154107            69360            84747
=> passed  puzzle32.txt     400259           191556           208703
=> passed  puzzle35.txt     235849           116812           119037
=> passed  puzzle33.txt     801629           383032           418597
=> passed  puzzle43.txt     660719           324734           335985
=> passed  puzzle46.txt     670681           337056           333625
=> passed  puzzle40.txt     363390           177974           185416
=> passed  puzzle36.txt    1997347           970590          1026757
==> 23/25 tests passed



Test 3: count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> FAILED  puzzle20.txt          32722 (Infinityx)   0            0
=> FAILED  puzzle22.txt          116688 (Infinityx)   0            0
=> FAILED  puzzle21.txt          48736 (Infinityx)   0            0
=> FAILED  puzzle23.txt          160276 (Infinityx)   0            0
=> FAILED  puzzle24.txt          61602 (Infinityx)   0            0
=> FAILED  puzzle25.txt          278824 (Infinityx)   0            0
=> FAILED  puzzle27.txt          196420 (Infinityx)   0            0
=> FAILED  puzzle29.txt          692124 (Infinityx)   0            0
=> FAILED  puzzle26.txt          175246 (Infinityx)   0            0
=> FAILED  puzzle28.txt          605744 (Infinityx)   0            0
=> FAILED  puzzle30.txt          1499708 (Infinityx)   0            0
=> FAILED  puzzle31.txt          2920168 (Infinityx)   0            0
=> FAILED  puzzle39.txt          1586288 (Infinityx)   0            0
=> FAILED  puzzle41.txt          872418 (Infinityx)   0            0
=> FAILED  puzzle34.txt          11698004 (Infinityx)   0            0
=> FAILED  puzzle37.txt          2596622 (Infinityx)   0            0
=> FAILED  puzzle44.txt          6172562 (Infinityx)   0            0
=> FAILED  puzzle32.txt          17576564 (Infinityx)   0            0
=> FAILED  puzzle35.txt          10844198 (Infinityx)   0            0
=> FAILED  puzzle33.txt          39241916 (Infinityx)   0            0
=> FAILED  puzzle43.txt          34182078 (Infinityx)   0            0
=> FAILED  puzzle46.txt          36844502 (Infinityx)   0            0
=> FAILED  puzzle40.txt          17566534 (Infinityx)   0            0
=> FAILED  puzzle36.txt          109511598 (Infinityx)   0            0
==> 0/25 tests passed



Test 4a: count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       2249                2239               14853
=> passed  puzzle22.txt       6435                6429               51799
=> passed  puzzle21.txt       3163                3155               21071
=> passed  puzzle23.txt       8531                8523               76933
=> passed  puzzle24.txt       3690                3680               28516
=> passed  puzzle25.txt      13348               13340              139100
=> passed  puzzle27.txt       9633                9625               94629
=> passed  puzzle29.txt      28299               28291              327351
=> passed  puzzle26.txt       8859                8853               83433
=> passed  puzzle28.txt      25256               25246              303692
=> passed  puzzle30.txt      54966               54960              825206
=> passed  puzzle31.txt      98355               98347             1578787
=> passed  puzzle39.txt      61821               61813              794039
=> passed  puzzle41.txt      40505               40495              328645
=> FAILED  puzzle34.txt     383498   (1.1x)     383492   (1.1x)    6570310   (1.3x)
=> passed  puzzle37.txt      98488               98480             1209816
=> passed  puzzle44.txt     223465              223455             2539779
=> passed  puzzle32.txt     591813              591803             9178919
=> passed  puzzle35.txt     352659              352649             5643433
=> passed  puzzle33.txt    1184659             1184651            23161147
=> passed  puzzle43.txt     985451              985443            17238843
=> passed  puzzle46.txt    1007735             1007727            19154531
=> passed  puzzle40.txt     541362              541356             9234336
=> passed  puzzle36.txt    2967935             2967925            61470371
==> 23/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt       2249                2239               14853   (4.3x)
=> FAILED  puzzle22.txt       6435                6429               51799   (6.2x)
=> FAILED  puzzle21.txt       3163                3155               21071   (2.5x)
=> FAILED  puzzle23.txt       8531                8523               76933   (6.1x)
=> FAILED  puzzle24.txt       3690                3680               28516   (2.2x)
=> FAILED  puzzle25.txt      13348               13340              139100   (5.6x)
=> FAILED  puzzle27.txt       9633                9625               94629   (3.5x)
=> FAILED  puzzle29.txt      28299               28291              327351  (11.7x)
=> FAILED  puzzle26.txt       8859                8853               83433   (2.9x)
=> FAILED  puzzle28.txt      25256               25246              303692   (4.7x)
=> FAILED  puzzle30.txt      54966               54960              825206   (8.0x)
=> FAILED  puzzle31.txt      98355               98347             1578787  (14.3x)
=> FAILED  puzzle39.txt      61821               61813              794039   (5.0x)
=> FAILED  puzzle41.txt      40505               40495              328645   (1.3x)
=> FAILED  puzzle34.txt     383498   (1.1x)     383492   (1.1x)    6570310  (19.5x)
=> FAILED  puzzle37.txt      98488               98480             1209816   (3.3x)
=> FAILED  puzzle44.txt     223465              223455             2539779   (4.2x)
=> FAILED  puzzle32.txt     591813              591803             9178919   (7.9x)
=> FAILED  puzzle35.txt     352659              352649             5643433   (4.8x)
=> FAILED  puzzle33.txt    1184659             1184651            23161147  (16.8x)
=> FAILED  puzzle43.txt     985451              985443            17238843   (7.3x)
=> FAILED  puzzle46.txt    1007735             1007727            19154531   (8.2x)
=> FAILED  puzzle40.txt     541362              541356             9234336   (3.7x)
=> FAILED  puzzle36.txt    2967935             2967925            61470371  (13.2x)
==> 0/25 tests passed


Total: 69/125 tests passed!


================================================================
