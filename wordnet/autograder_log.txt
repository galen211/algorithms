See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (1 warning)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 8 warnings)

Correctness:  27/35 tests passed
Memory:       4/4 tests passed
Timing:       22/19 tests passed

Aggregate score: 89.44%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.1K Nov 10 22:06 Outcast.java
5.6K Nov 10 22:06 SAP.java
4.1K Nov 10 22:06 WordNet.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac SAP.java
*-----------------------------------------------------------

% javac WordNet.java
*-----------------------------------------------------------

% javac Outcast.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
SAP:

WordNet:

Outcast:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M P NAB_NEEDLESS_BOXING_VALUEOF NAB: Method new WordNet(String, String) converts String to boxed primitive using excessive boxing  At WordNet.java:[line 34]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------
Outcast.java:46: The private instance (or static) variable 'dist' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Outcast.java:47: The private instance (or static) variable 'noun' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
SAP.java:13: The private instance (or static) variable 'visited' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
SAP.java:18: This instance variable should be turned into a class constant by adding the 'static' modifier. [FinalFieldCouldBeStatic]
SAP.java:227: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
WordNet.java:7: Can you replace the instance (or static) variable 'digraph' with a local variable? [SingularField]
WordNet.java:31: Avoid using assignment statements in expressions; this can make code harder to read. [AssignmentInOperand]
WordNet.java:56: Avoid using assignment statements in expressions; this can make code harder to read. [AssignmentInOperand]
WordNet.java:141: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 9 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Outcast.java:1: Do not use .* in import statements. [AvoidStarImport]
[WARN] SAP.java:18:23: The instance variable 'MAX_CACHE_SIZE' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] SAP.java:112:24: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] SAP.java:217:13: The local variable 'V' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] WordNet.java:1: Do not use .* in import statements. [AvoidStarImport]
[WARN] WordNet.java:34:13: Use the primitive type instead of the corresponding wrapper type. For example, use 'boolean' instead of 'Boolean'. [wrapper]
Checkstyle ends with 0 errors and 6 warnings.

% custom checkstyle checks for SAP.java
*-----------------------------------------------------------
[INFO] SAP.java:17:13: You will probably not achieve the performance requirement if you use the 'ST' data type in this program. Consider using a hash table instead of a BST. [Performance]
[INFO] SAP.java:53:9: You will probably not achieve the performance requirement if you use the 'ST' data type in this program. Consider using a hash table instead of a BST. [Performance]
[INFO] SAP.java:54:9: You will probably not achieve the performance requirement if you use the 'ST' data type in this program. Consider using a hash table instead of a BST. [Performance]
[INFO] SAP.java:74:9: You will probably not achieve the performance requirement if you use the 'ST' data type in this program. Consider using a hash table instead of a BST. [Performance]
[INFO] SAP.java:75:9: You will probably not achieve the performance requirement if you use the 'ST' data type in this program. Consider using a hash table instead of a BST. [Performance]
[INFO] SAP.java:78:9: You will probably not achieve the performance requirement if you use the 'SET' data type in this program. Consider using a hash table instead of a BST. [Performance]
[INFO] SAP.java:112:13: You will probably not achieve the performance requirement if you use the 'ST' data type in this program. Consider using a hash table instead of a BST. [Performance]
[INFO] SAP.java:118:9: You will probably not achieve the performance requirement if you use the 'ST' data type in this program. Consider using a hash table instead of a BST. [Performance]
[WARN] SAP.java:18:40: The numeric literal '100' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for WordNet.java
*-----------------------------------------------------------

% custom checkstyle checks for Outcast.java
*-----------------------------------------------------------
[WARN] Outcast.java:44:31: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of SAP
*-----------------------------------------------------------
Running 19 total tests.

Test 1: check length() and ancestor() on fixed digraphs
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph9.txt
==> passed

Test 2: check length() and ancestor() on WordNet digraph
  * 100 random vertex pairs in digraph-wordnet.txt
==> passed

Test 3: check length() and ancestor() on directed paths
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 4: check length() and ancestor() on directed cycles
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 5: check length() and ancestor() on complete graphs
  * 5
  * 10
  * 20
  * 50
==> passed

Test 6: check length() and ancestor() on tournament digraphs
  * 5
  * 10
  * 20
  * 50
==> passed

Test 7: check length() and ancestor() on complete binary trees
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 8: check length() and ancestor() on random DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 9: check length() and ancestor() on random rooted-in DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 10: check length() and ancestor() on random rooted-out DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 11: check length() and ancestor() on random rooted-in trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 12: check length() and ancestor() on random rooted-out trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 13: check length() and ancestor() on random simple digraphs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 14: check whether two SAP objects can be created at the same time
  * digraph1.txt and digraph2.txt
  * digraph3.txt and digraph4.txt
  * digraph5.txt and digraph6.txt
  * digraph2.txt and digraph1.txt
==> passed

Test 15: check whether SAP is immutable
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph-ambiguous-ancestor.txt
==> passed

Test 16: check invalid arguments to length() and ancestor() in digraph1.txt
  * v = -1, w = 0
  * v = 0, w = -1
  * v = 13, w = 0
  * v = 0, w = 13
  * v = -1 2 7 , w = 1 4 6 10 11
    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
  * v = 2 7 , w = -1 1 4 6 10 11
    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
  * v = 13 2 7 , w = 1 4 6 10 11
    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
  * v = 2 7 , w = 13 1 4 6 10 11
    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
    - invalid argument
    - but java.lang.IllegalArgumentException not thrown
==> FAILED

Test 17: check length() and ancestor() with Iterable arguments
  * 100 random subsets of 1 and 1 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 35083
    - w = 48629
    - student   length() = 0
    - reference length() = 9

  * 100 random subsets of 1 and 2 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 7093
    - w = 18765 21191
    - student   length() = 0
    - reference length() = 12

  * 100 random subsets of 2 and 1 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 33733 81309
    - w = 6202
    - student   length() = 15
    - reference length() = 14

  * 100 random subsets of 2 and 2 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 60136 77834
    - w = 43425 51151
    - student   length() = 14
    - reference length() = 12

  * 100 random subsets of 3 and 11 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 872 38687 50710
    - w size = 11
    - student   length() = 20
    - reference length() = 4

  * 100 random subsets of 11 and 3 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v size = 11
    - w = 23705 30671 60987
    - student   length() = 124
    - reference length() = 9

  * 100 random subsets of 0 and 5 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v =
    - w = 7107 25377 28935 36135 70766
    - student   length   = 2147483647
    - reference length   = -1
    - student   ancestor = -1
    - reference ancestor = -1

  * 100 random subsets of 5 and 0 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 12849 16732 42099 53992 58198
    - w =
    - student   length() = 57
    - reference length() = -1

  * 100 random subsets of 0 and 0 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v =
    - w =
    - student   length   = 2147483647
    - reference length   = -1
    - student   ancestor = -1
    - reference ancestor = -1

==> FAILED

Test 18: Check Iterable version of length() and ancestor() with null arguments
==> passed

Test 19: random calls to both version of length() and ancestor(),
         with probabilities p1 and p2, respectively
  * random calls in a random rooted DAG (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - failed on call 1 to length()
    - v = 5 6 8 11 19
    - w = 0 7 13 19
    - student   length() = 6
    - reference length() = 0

  * random calls in a random digraph (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - failed on call 4 to length()
    - v = 0 3 9 15
    - w = 3 5 7 10
    - student   length() = 3
    - reference length() = 0

==> FAILED


Total: 16/19 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP)
********************************************************************************

Testing correctness of WordNet
*-----------------------------------------------------------
Running 14 total tests.

Test 1: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed on pair 3 of 1000
    - nounA = Last_Judgement
    - nounB = vaulter
    - student   distance() = 12
    - reference distance() = 13

==> FAILED

Test 2: check distance() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
==> passed

Test 3: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - failed on pair 118 of 1000
    - nounA = train_oil
    - nounB = nerve_tract
    - student   distance() = 11
    - reference distance() = 14

==> FAILED

Test 4: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - student sap() is too far to be a valid common ancestor when testing pair 5 of 1000
    - nounA = trip
    - nounB = fraternal_twin
    - student   sap() = 'person individual someone somebody mortal soul'
    - reference sap() = 'entity'
    - student   distance() = 5
    - reference distance() to 'entity' = 13
    - actual distance to 'person individual someone somebody mortal soul' = -1

==> FAILED

Test 5: check sap() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
==> passed

Test 6: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
==> passed

Test 7: check whether WordNet is immutable
  * synsets = synsets.txt; hypernyms = hypernyms.txt
==> passed

Test 8: check constructor when input is not a rooted DAG
  * synsets3.txt, hypernyms3InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets3.txt, hypernyms3InvalidCycle.txt
  * synsets6.txt, hypernyms6InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle.txt
  * synsets6.txt, hypernyms6InvalidCycle+Path.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 9: check isNoun()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> passed

Test 10: check nouns()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> passed

Test 11: check whether two WordNet objects can be created at the same time
  * synsets1 = synsets15.txt; hypernyms1 = hypernyms15Tree.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
  * synsets1 = synsets.txt; hypernyms1 = hypernyms.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
==> passed

Test 12: call distance() and sap() with invalid arguments
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "b"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "b", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "a", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "x"
==> passed

Test 13: call isNoun() with a null argument
  * synsets15.txt, hypernyms15Path.txt
==> passed

Test 14: random calls to isNoun(), distance(), and sap(), with
         probabilities p1, p2, and p3, respectively
  * 100 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0)
    - failed on call 2 to distance()
    - nounA = knucks
    - nounB = candela
    - student   distance() = 6
    - reference distance() = 17

  * 100 random calls (p1 = 0.5, p2 = 0.0, p3 = 0.5)
    - student sap() is too far to be a valid common ancestor when testing pair 5 of 100
    - nounA = bbl
    - nounB = chalice
    - student   sap() = 'container'
    - reference sap() = 'entity'
    - student   distance() = 4
    - reference distance() to 'entity' = 16
    - actual distance to 'container' = -1

    - failed on call 5 to sap()
  * 100 random calls (p1 = 0.0, p2 = 0.5, p3 = 0.5)
    - failed on call 3 to distance()
    - nounA = sermoniser
    - nounB = Cape_periwinkle
    - student   distance() = 7
    - reference distance() = 9

  * 100 random calls (p1 = 0.2, p2 = 0.4, p3 = 0.4)
    - failed on call 3 to distance()
    - nounA = heading
    - nounB = Echidnophaga
    - student   distance() = 9
    - reference distance() = 13

==> FAILED


Total: 9/14 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP and WordNet)
********************************************************************************

Testing correctness of Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check outcast() on WordNet digraph
        (synsets.txt and hypernyms.txt)
  * outcast2.txt
  * outcast3.txt
  * outcast4.txt
  * outcast5.txt
  * outcast5a.txt
  * outcast7.txt
  * outcast8.txt
  * outcast8a.txt
  * outcast8b.txt
  * outcast8c.txt
  * outcast9.txt
  * outcast9a.txt
  * outcast10.txt
  * outcast10a.txt
  * outcast11.txt
  * outcast12.txt
  * outcast12a.txt
  * outcast17.txt
  * outcast20.txt
  * outcast29.txt
==> passed

Test 2: check outcast() on WordNet subgraph
        (synsets50000-subgraph.txt and hypernyms50000-subgraph.txt)
  * outcast2.txt
  * outcast3.txt
  * outcast5.txt
  * outcast5a.txt
  * outcast7.txt
  * outcast8.txt
  * outcast8b.txt
  * outcast8c.txt
  * outcast9.txt
  * outcast10.txt
  * outcast11.txt
==> passed


Total: 2/2 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of SAP
*-----------------------------------------------------------
Running 1 total tests.

digraph G             = digraph-wordnet.txt
vertices in G         = 82192
edges    in G         = 84505
student     memory    = 8759168 bytes
reference   memory    = 10320360 bytes
ratio                 = 0.85
maximum allowed ratio = 2.50

Total: 1/1 tests passed!

================================================================



Analyzing memory of WordNet
*-----------------------------------------------------------
Running 3 total tests.

Test 1a: check memory of WordNet object
  * synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - number of vertices in digraph = 1000
    - number of edges    in digraph = 1008
    - student   memory              = 670688 bytes
    - reference memory              = 1494080 bytes
    - student / reference ratio     = 0.4
    - maximum allowed rato          = 2.0

==> passed

Test 1b: check memory of WordNet object
  * synsets = synsets5000-subgraph.txt; hypernyms = hypernyms5000-subgraph.txt
    - number of vertices in digraph = 5000
    - number of edges    in digraph = 5059
    - student   memory              = 3339664 bytes
    - reference memory              = 7296512 bytes
    - student / reference ratio     = 0.5
    - maximum allowed rato          = 2.0

==> passed

Test 1c: check memory of WordNet object
  * synsets = synsets10000-subgraph.txt; hypernyms = hypernyms10000-subgraph.txt
    - number of vertices in digraph = 10000
    - number of edges    in digraph = 10087
    - student   memory              = 7676568 bytes
    - reference memory              = 16933184 bytes
    - student / reference ratio     = 0.5
    - maximum allowed rato          = 2.0

==> passed

Total: 3/3 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing SAP
*-----------------------------------------------------------
Running 7 total tests.

Test 1: time SAP constructor
   *  digraph-wordnet.txt
    - student solution time =  0.02 seconds
    - maximum allowed  time =  1.00 seconds
==> passed

Test 2a-c: time length() and ancestor() with random pairs of vertices
  *  digraph-wordnet.txt
    - reference solution calls per second:  547728.00
    - student   solution calls per second:  306399.33
    - reference / student ratio:                 1.79

=> passed    student <= 50000x reference
=> passed    student <=  5000x reference
=> passed    student <=   500x reference
=> BONUS     student <=    50x reference
=> BONUS     student <=     5x reference

Test 3a-c: time length() and ancestor() with random sets of 5 vertices
  *  digraph-wordnet.txt
    - reference solution calls per second:  190089.33
    - student   solution calls per second:   63053.33
    - reference / student ratio:                 3.01

=> passed    student <= 20000x reference
=> passed    student <=  2000x reference
=> passed    student <=   200x reference
=> BONUS     student <=    20x reference


Total: 10/7 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP)
********************************************************************************

Timing WordNet
*-----------------------------------------------------------
Running 11 total tests.

Test 1: check that exactly two In object created
        (one for synsets file and one for hypernyms file)
==> passed

Test 2: count number of SAP operations when constructing a WordNet object
        and calling distance() and sap() three times each
  * calls to constructor = 1
  * calls to length()    = 3
  * calls to ancestor()  = 6

==> passed

Test 3: count Digraph operations during WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * number of synsets    = 82192
  * number of hypernyms  = 84505
  * calls to constructor = 2
  * calls to addEdge()   = 84505
  * calls to adj()       = 82192
  * calls to outdegree() = 0
  * calls to indegree()  = 82192
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> passed

Test 4: count Digraph operations during 1000 calls each
        to distance() and sap()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * calls to constructor = 0
  * calls to addEdge()   = 0
  * calls to adj()       = 74310
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> passed

Test 5: time WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - student constructor time =  0.49 seconds
    - maximum allowed     time = 10.00 seconds

==> passed

Test 6a-e: time sap() and distance() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  202365.00
    - student   solution calls per second:  102131.50
    - reference / student ratio:                 1.98

=> passed    student <= 10000x reference
=> passed    student <=  1000x reference
=> passed    student <=   100x reference
=> passed    student <=    10x reference
=> passed    student <=     5x reference

Test 7: time isNoun() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  603782.00
    - student   solution calls per second:  451505.00
    - reference / student ratio:                 1.34
    - allowed ratio:                             4.00
==> passed

Total: 11/11 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP and WordNet)
********************************************************************************

Timing Outcast
*-----------------------------------------------------------
Running 1 total tests.

1.14 seconds to build WordNet

Computing time to find outcasts of various outcast files.
Total time must not exceed 1.0 seconds.

    filename       n     time
-----------------------------
   outcast4.txt    4     0.00
   outcast5.txt    5     0.00
  outcast5a.txt    5     0.00
   outcast5.txt    5     0.00
   outcast7.txt    7     0.00
   outcast8.txt    8     0.00
  outcast8a.txt    8     0.00
  outcast8b.txt    8     0.00
  outcast8c.txt    8     0.00
   outcast9.txt    9     0.00
  outcast9a.txt    9     0.00
  outcast10.txt   10     0.00
 outcast10a.txt   10     0.00
  outcast11.txt   11     0.00
  outcast12.txt   12     0.00
 outcast12a.txt   12     0.00
  outcast20.txt   20     0.00
  outcast29.txt   29     0.01

Total elapsed time: 0.03 seconds

==> passed

Total: 1/1 tests passed!


================================================================
